=============
ObDict README
=============

What makes an ObDict tick
=========================

If you are a user of any kind of Python console that sports Tab completion,
you may have come to appreciate automatic attribute listing.  This is,
perhaps, the most immediately rewarding part of using ObDict.  To begin 
magical experience, follow by example.


Core Features
=============

This type wraps a given dict-like object for dotted attribute access of keys.

    >>> import obdict
    >>> obby = obdict.ObDict('obby', {'zoobaz': 'pantaloon', 'skidz': {'fashizzle': 9000, 'hambones': {'bork': ['-ing', '-ham']}, 'boo': 'ghosty'}})
    >>> obby.zoobaz
    'pantaloon'
    >>> obby.skidz.fashizzle
    9000
    >>> obby.skidz.hambones.bork
    ['-ing', '-ham']


Repr and Str friendly
---------------------

The ``repr()`` of this type is a true repr, as it provides an ``eval``-able 
string, while the ``str()`` will print the object's "twin" dict-like object.

    >>> print obby
    {'skidz': {'fashizzle': 9000, 'boo': 'ghosty', 'hambones': {'bork': ['-ing', '-ham']}}, 'zoobaz': 'pantaloon'}
    >>> obby
    ObDict('obby', {'skidz': {'fashizzle': 9000, 'boo': 'ghosty', 'hambones': {'bork': ['-ing', '-ham']}}, 'zoobaz': 'pantaloon'}, '_')


Attribute name mangling
-----------------------

Because of the (very sensible) restrictions on attribute naming in Python,
dict keys that are reserved keywords, contain restricted characters, or
begin with digits will be sensibly mangled with a given fill character 
(default='_').

    >>> yucky_dict = {'assert': 'cheezmeltz', 'print': 'coupon', '1992': 'best year ever'}
    >>> fill_char = 'XXX'
    >>> mangle_ob = obdict.ObDict('arbys', yucky_dict, fill_char)

The ``str()`` and ``repr()`` forms reflect the fact that your original
dict keys are safe and sound

    >>> print mangle_ob
    {'assert': 'cheezmeltz', 'print': 'coupon', '1992': 'best year ever'}
    >>> mangle_ob
    ObDict('arbys', {'assert': 'cheezmeltz', 'print': 'coupon', '1992': 'best year ever'}, 'XXX')
    >>> mangle_ob.keys()
    ['assert', 'print', '1992']

However, when attempting to access these attributes, the mangling is 
immediately apparent.

    >>> # can't do 'mangle_ob.print' or 'mangle_ob.assert' because 
    >>> # doing so would raise SyntaxError, so...
    >>> mangle_ob.printXXX
    'coupon'
    >>> mangle_ob.assertXXX
    'cheezmeltz'
    >>> # likewise, 'mangle_ob.1992' raises SyntaxError, so we do:
    >>> mangle_ob.XXX1992
    'best year ever'

Attempts to assign a mangling fill character that is 'bad' will raise 
ObDictError, which is a subclass of SyntaxError.


Language Reference Compliance
-----------------------------

ObDict is compliant with the Python Language Reference's section on 
`emulating container types`_ with regard to its recommendations for mapping 
containers.


Source Code
===========

Both built and source distributions are available in ObDict's 
`dist directory`_, while the latest source is available in a Git repository::

  git clone http://meatballhat.com/attic/code/ObDict.git/

Why distribute a type?
======================

The `author`_ is a huge fan of `IPython`_ and believes strongly in thoroughly
developed <whatever>, even if motivation is questionable :)


.. _emulating container types: http://docs.python.org/ref/sequence-types.html
.. _dist directory: http://meatballhat.com/attic/code/ObDict/dist/
.. _author: daniel.buch@gmail.com
.. _IPython: http://ipython.scipy.org/
